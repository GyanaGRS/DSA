Given a sorted array of size N and an integer K, find the position(0-based indexing) at which K is present in the array using binary search.

class Solution {
    int binarysearch(int arr[], int n, int k) {
        int left = 0;
        int right = n - 1;

        while (left <= right) {
            int mid = left + (right - left) / 2;

            // Check if k is present at mid
            if (arr[mid] == k) {
                return mid; // Return the index (0-based)
            }

            // If k greater, ignore left half
            if (arr[mid] < k) {
                left = mid + 1;
            }
            // If k is smaller, ignore right half
            else {
                right = mid - 1;
            }
        }

        // k was not found in the array
        return -1; // Return -1 if k is not present
    }
}
